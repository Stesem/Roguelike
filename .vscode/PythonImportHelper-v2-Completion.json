[
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "src.suppor",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "src.suppor",
        "description": "src.suppor",
        "detail": "src.suppor",
        "documentation": {}
    },
    {
        "label": "white",
        "importPath": "src.suppor",
        "description": "src.suppor",
        "isExtraImport": true,
        "detail": "src.suppor",
        "documentation": {}
    },
    {
        "label": "purple",
        "importPath": "src.suppor",
        "description": "src.suppor",
        "isExtraImport": true,
        "detail": "src.suppor",
        "documentation": {}
    },
    {
        "label": "rooms_quantity",
        "importPath": "src.suppor",
        "description": "src.suppor",
        "isExtraImport": true,
        "detail": "src.suppor",
        "documentation": {}
    },
    {
        "label": "map_size",
        "importPath": "src.suppor",
        "description": "src.suppor",
        "isExtraImport": true,
        "detail": "src.suppor",
        "documentation": {}
    },
    {
        "label": "basic_entity_size",
        "importPath": "src.suppor",
        "description": "src.suppor",
        "isExtraImport": true,
        "detail": "src.suppor",
        "documentation": {}
    },
    {
        "label": "floor_size",
        "importPath": "src.suppor",
        "description": "src.suppor",
        "isExtraImport": true,
        "detail": "src.suppor",
        "documentation": {}
    },
    {
        "label": "world_size",
        "importPath": "src.suppor",
        "description": "src.suppor",
        "isExtraImport": true,
        "detail": "src.suppor",
        "documentation": {}
    },
    {
        "label": "create_sprite",
        "importPath": "src.suppor",
        "description": "src.suppor",
        "isExtraImport": true,
        "detail": "src.suppor",
        "documentation": {}
    },
    {
        "label": "create_sprites_group",
        "importPath": "src.suppor",
        "description": "src.suppor",
        "isExtraImport": true,
        "detail": "src.suppor",
        "documentation": {}
    },
    {
        "label": "floor_size",
        "importPath": "src.suppor",
        "description": "src.suppor",
        "isExtraImport": true,
        "detail": "src.suppor",
        "documentation": {}
    },
    {
        "label": "world_size",
        "importPath": "src.suppor",
        "description": "src.suppor",
        "isExtraImport": true,
        "detail": "src.suppor",
        "documentation": {}
    },
    {
        "label": "check_time_passed",
        "importPath": "src.suppor",
        "description": "src.suppor",
        "isExtraImport": true,
        "detail": "src.suppor",
        "documentation": {}
    },
    {
        "label": "basic_entity_size",
        "importPath": "src.suppor",
        "description": "src.suppor",
        "isExtraImport": true,
        "detail": "src.suppor",
        "documentation": {}
    },
    {
        "label": "get_mask_rect",
        "importPath": "src.suppor",
        "description": "src.suppor",
        "isExtraImport": true,
        "detail": "src.suppor",
        "documentation": {}
    },
    {
        "label": "get_mask_rect",
        "importPath": "src.suppor",
        "description": "src.suppor",
        "isExtraImport": true,
        "detail": "src.suppor",
        "documentation": {}
    },
    {
        "label": "world_size",
        "importPath": "src.suppor",
        "description": "src.suppor",
        "isExtraImport": true,
        "detail": "src.suppor",
        "documentation": {}
    },
    {
        "label": "world_size",
        "importPath": "src.suppor",
        "description": "src.suppor",
        "isExtraImport": true,
        "detail": "src.suppor",
        "documentation": {}
    },
    {
        "label": "Room",
        "importPath": "src.map.room",
        "description": "src.map.room",
        "isExtraImport": true,
        "detail": "src.map.room",
        "documentation": {}
    },
    {
        "label": "Room",
        "importPath": "src.map.room",
        "description": "src.map.room",
        "isExtraImport": true,
        "detail": "src.map.room",
        "documentation": {}
    },
    {
        "label": "MapLayout",
        "importPath": "src.map.map_layout",
        "description": "src.map.map_layout",
        "isExtraImport": true,
        "detail": "src.map.map_layout",
        "documentation": {}
    },
    {
        "label": "MapLayout",
        "importPath": "src.map.map_layout",
        "description": "src.map.map_layout",
        "isExtraImport": true,
        "detail": "src.map.map_layout",
        "documentation": {}
    },
    {
        "label": "Dungeon",
        "importPath": "src.map.dungeon",
        "description": "src.map.dungeon",
        "isExtraImport": true,
        "detail": "src.map.dungeon",
        "documentation": {}
    },
    {
        "label": "shuffle",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "pygame.sprite",
        "description": "pygame.sprite",
        "isExtraImport": true,
        "detail": "pygame.sprite",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "pygame.sprite",
        "description": "pygame.sprite",
        "isExtraImport": true,
        "detail": "pygame.sprite",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "EntityBase",
        "importPath": "src.players.entity_base",
        "description": "src.players.entity_base",
        "isExtraImport": true,
        "detail": "src.players.entity_base",
        "documentation": {}
    },
    {
        "label": "EntityBase",
        "importPath": "src.players.entity_base",
        "description": "src.players.entity_base",
        "isExtraImport": true,
        "detail": "src.players.entity_base",
        "documentation": {}
    },
    {
        "label": "CultistBullet",
        "importPath": "src.items.bullet",
        "description": "src.items.bullet",
        "isExtraImport": true,
        "detail": "src.items.bullet",
        "documentation": {}
    },
    {
        "label": "BulletManager",
        "importPath": "src.items.bullet",
        "description": "src.items.bullet",
        "isExtraImport": true,
        "detail": "src.items.bullet",
        "documentation": {}
    },
    {
        "label": "Abomination",
        "importPath": "src.players.enemies",
        "description": "src.players.enemies",
        "isExtraImport": true,
        "detail": "src.players.enemies",
        "documentation": {}
    },
    {
        "label": "Cultist",
        "importPath": "src.players.enemies",
        "description": "src.players.enemies",
        "isExtraImport": true,
        "detail": "src.players.enemies",
        "documentation": {}
    },
    {
        "label": "load_sprites_for_animation",
        "importPath": "src.players.animation",
        "description": "src.players.animation",
        "isExtraImport": true,
        "detail": "src.players.animation",
        "documentation": {}
    },
    {
        "label": "AnimationHandler",
        "importPath": "src.players.animation",
        "description": "src.players.animation",
        "isExtraImport": true,
        "detail": "src.players.animation",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Player",
        "importPath": "src.players.player",
        "description": "src.players.player",
        "isExtraImport": true,
        "detail": "src.players.player",
        "documentation": {}
    },
    {
        "label": "DungeonManager",
        "importPath": "src.map.dungeon_manager",
        "description": "src.map.dungeon_manager",
        "isExtraImport": true,
        "detail": "src.map.dungeon_manager",
        "documentation": {}
    },
    {
        "label": "EnemyManager",
        "importPath": "src.players.enemy_manager",
        "description": "src.players.enemy_manager",
        "isExtraImport": true,
        "detail": "src.players.enemy_manager",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "ControlScreen",
        "importPath": "src.control_screen",
        "description": "src.control_screen",
        "isExtraImport": true,
        "detail": "src.control_screen",
        "documentation": {}
    },
    {
        "label": "Game",
        "importPath": "src.game",
        "description": "src.game",
        "isExtraImport": true,
        "detail": "src.game",
        "documentation": {}
    },
    {
        "label": "CultistBullet",
        "kind": 6,
        "importPath": "src.items.bullet",
        "description": "src.items.bullet",
        "peekOfCode": "class CultistBullet:\n    speed = 5\n    radius = 5\n    size = 10\n    def __init__(self, game, master, x, y, target, room):\n        self.game = game\n        self.master = master\n        self.damage = master.damage\n        self.target = target\n        self.rect = None",
        "detail": "src.items.bullet",
        "documentation": {}
    },
    {
        "label": "BulletManager",
        "kind": 6,
        "importPath": "src.items.bullet",
        "description": "src.items.bullet",
        "peekOfCode": "class BulletManager:\n    def __init__(self, game):\n        self.game = game\n        self.bullets = []\n    def add_bullet(self, bullet):\n        self.bullets.append(bullet)\n    def update(self):\n        for bullet in self.bullets:\n            bullet.update()\n    def draw(self, screen):",
        "detail": "src.items.bullet",
        "documentation": {}
    },
    {
        "label": "Dungeon",
        "kind": 6,
        "importPath": "src.map.dungeon",
        "description": "src.map.dungeon",
        "peekOfCode": "class Dungeon:\n    def __init__(self, map_pattern_size, room_quantity):\n        self.map_layout = MapLayout(map_pattern_size, room_quantity)\n        self.map = [\n            [None for _ in range(map_pattern_size)] for _ in range(map_pattern_size)\n        ]\n        self.start_position = self.map_layout.start_position\n        self.latest_room_position = (self.start_position, self.start_position)\n        self.generate_map()\n    def _check_neighbors(self, row_index, column_index):",
        "detail": "src.map.dungeon",
        "documentation": {}
    },
    {
        "label": "DungeonManager",
        "kind": 6,
        "importPath": "src.map.dungeon_manager",
        "description": "src.map.dungeon_manager",
        "peekOfCode": "class DungeonManager:\n    def __init__(self, game):\n        self.game = game\n        self.dungeon = None\n        self.position_x, self.position_y = None, None\n        self.current_room = None\n        self.next_room = None\n        self.switch_room = None\n        self.create_dungeon_manager()\n        self.finished = False  # Add this to track if the game is finished",
        "detail": "src.map.dungeon_manager",
        "documentation": {}
    },
    {
        "label": "MapLayout",
        "kind": 6,
        "importPath": "src.map.map_layout",
        "description": "src.map.map_layout",
        "peekOfCode": "class MapLayout:\n    def __init__(self, size, elem_quantity):\n        self.size = size  # Таблица квадратная, один параметр размера\n        self.layout = [[False for _ in range(self.size)] for _ in range(self.size)]\n        self.start_position = self.size // 2\n        self.elem_count = 0\n        self.fill_layout(elem_quantity)\n    def __fill_layout_recursive(self, row_index, column_index, elem_quantity):\n        if (self.elem_count == elem_quantity) or self.layout[row_index][column_index]:\n            return",
        "detail": "src.map.map_layout",
        "documentation": {}
    },
    {
        "label": "Passage",
        "kind": 6,
        "importPath": "src.map.room",
        "description": "src.map.room",
        "peekOfCode": "class Passage:\n    def __init__(self, passage_info):\n        self.passage_info = passage_info\n        image = pygame.image.load(self.passage_info[\"image\"]).convert_alpha()\n        image = pygame.transform.scale(\n            image, (self.passage_info[\"width\"], self.passage_info[\"height\"])\n        )\n        self.sprite = create_sprite(image, passage_info)\n        self.from_room = None\n        self.to_room = None",
        "detail": "src.map.room",
        "documentation": {}
    },
    {
        "label": "Room",
        "kind": 6,
        "importPath": "src.map.room",
        "description": "src.map.room",
        "peekOfCode": "class Room:\n    def __init__(self):\n        self.passages_on_direction = {\n            \"right\": None,\n            \"left\": None,\n            \"up\": None,\n            \"down\": None,\n        }\n        self.load_from_json()\n        self.passages = Group()",
        "detail": "src.map.room",
        "documentation": {}
    },
    {
        "label": "AnimationHandler",
        "kind": 6,
        "importPath": "src.players.animation",
        "description": "src.players.animation",
        "peekOfCode": "class AnimationHandler:\n    def __init__(self, entity, death_frames=4, animation_speed=25):\n        self.entity = entity\n        self.direction = \"right\"\n        self.frame_index = 0\n        self.hurt_time_marker = 0\n        self.total_death_frames = death_frames\n        self.animation_speed = animation_speed\n    def is_moving(self):\n        return bool(self.entity.velocity[0]) or bool(self.entity.velocity[1])",
        "detail": "src.players.animation",
        "documentation": {}
    },
    {
        "label": "load_sprites_for_animation",
        "kind": 2,
        "importPath": "src.players.animation",
        "description": "src.players.animation",
        "peekOfCode": "def load_sprites_for_animation(path, sprite_size=utils.basic_entity_size):\n    animation_data = {\"IDLE\": [], \"WALK\": [], \"HURT\": [], \"DEAD\": []}\n    animation_states = os.listdir(path)\n    for state in animation_states:\n        sub_states = os.listdir(path + state)\n        for sub_state in sub_states:\n            key = state.upper()\n            animation_image = pygame.image.load(\n                path + state + \"/\" + sub_state\n            ).convert_alpha()",
        "detail": "src.players.animation",
        "documentation": {}
    },
    {
        "label": "Enemy",
        "kind": 6,
        "importPath": "src.players.enemies",
        "description": "src.players.enemies",
        "peekOfCode": "class Enemy(EntityBase):\n    def __init__(self, game, name, spawn_room):\n        super().__init__(game, name)\n        self.room = spawn_room\n        self.attack_cd = 1000\n        self.attack_timer = 0\n        self.destination_point = None\n    def spawn(self):\n        screen_center = (world_size[0] / 2, world_size[1] / 2)\n        spawn_space_x = screen_center[0] - floor_size[0] / 2",
        "detail": "src.players.enemies",
        "documentation": {}
    },
    {
        "label": "Abomination",
        "kind": 6,
        "importPath": "src.players.enemies",
        "description": "src.players.enemies",
        "peekOfCode": "class Abomination(Enemy):\n    name = \"abomination\"\n    damage = 15\n    speed = 200\n    def __init__(self, game, room):\n        super().__init__(game, self.name, room)\nclass Cultist(Enemy):\n    name = \"cultist\"\n    damage = 20\n    speed = 300",
        "detail": "src.players.enemies",
        "documentation": {}
    },
    {
        "label": "Cultist",
        "kind": 6,
        "importPath": "src.players.enemies",
        "description": "src.players.enemies",
        "peekOfCode": "class Cultist(Enemy):\n    name = \"cultist\"\n    damage = 20\n    speed = 300\n    def __init__(self, game, room):\n        super().__init__(game, self.name, room)\n        self.attack_cd = 700\n    def cast_spell(self):\n        if (\n            not sum(self.velocity)",
        "detail": "src.players.enemies",
        "documentation": {}
    },
    {
        "label": "EnemyManager",
        "kind": 6,
        "importPath": "src.players.enemy_manager",
        "description": "src.players.enemy_manager",
        "peekOfCode": "class EnemyManager:\n    def __init__(self, game):\n        self.game = game\n        self.enemy_list = []\n    def draw_enemies(self, screen):\n        for enemy in self.game.dungeon_manager.current_room.enemy_list:\n            enemy.draw(screen)\n    def fill_enemy_list(self):\n        self.enemy_list.clear()\n        for enemy in self.game.dungeon_manager.current_room.enemy_list:",
        "detail": "src.players.enemy_manager",
        "documentation": {}
    },
    {
        "label": "EntityBase",
        "kind": 6,
        "importPath": "src.players.entity_base",
        "description": "src.players.entity_base",
        "peekOfCode": "class EntityBase:\n    def __init__(self, game, name):\n        self.game = game\n        self.name = name\n        self.path = f\"assets/characters/{self.name}\"\n        self.animation_database = load_sprites_for_animation(f\"{self.path}/\")\n        self.image = pygame.transform.scale(\n            pygame.image.load(f\"{self.path}/idle/idle0.png\"), basic_entity_size\n        ).convert_alpha()\n        self.rect = self.image.get_rect()",
        "detail": "src.players.entity_base",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "src.players.player",
        "description": "src.players.player",
        "peekOfCode": "class Player(EntityBase):\n    name = \"player\"\n    speed = 400\n    max_hp = 600\n    hp = max_hp\n    def __init__(self, game):\n        super().__init__(game, self.name)\n        self.weapon = None\n        self.rect = self.image.get_rect(center=(world_size[0] / 2, world_size[1] / 2))\n        self.hitbox = get_mask_rect(self.image, self.rect.topleft)",
        "detail": "src.players.player",
        "documentation": {}
    },
    {
        "label": "ControlScreen",
        "kind": 6,
        "importPath": "src.control_screen",
        "description": "src.control_screen",
        "peekOfCode": "class ControlScreen:\n    def __init__(self, game):\n        self.game = game\n        self.font = pygame.font.Font(None, 36)\n        self.instructions = [\n            \"WASD - Moving\",\n            \"RMB - Interact\",\n            \"Press Space bar to start\",\n        ]\n        self.is_active = True",
        "detail": "src.control_screen",
        "documentation": {}
    },
    {
        "label": "Game",
        "kind": 6,
        "importPath": "src.game",
        "description": "src.game",
        "peekOfCode": "class Game:\n    def __init__(self):\n        self.display = pygame.display.set_mode(world_size)\n        self.screen = pygame.Surface(world_size).convert()\n        self.clock = pygame.time.Clock()\n        self.player = Player(self)\n        self.dungeon_manager = DungeonManager(self)\n        self.enemy_manager = EnemyManager(self)\n        self.bullet_manager = BulletManager(self)\n        self.running = True",
        "detail": "src.game",
        "documentation": {}
    },
    {
        "label": "check_time_passed",
        "kind": 2,
        "importPath": "src.suppor",
        "description": "src.suppor",
        "peekOfCode": "def check_time_passed(time, threshold_time):\n    if pygame.time.get_ticks() - time > threshold_time:\n        time = pygame.time.get_ticks()\n        return True\ndef get_mask_rect(surface, topleft=(0, 0)):\n    surface_mask = pygame.mask.from_surface(surface)\n    rect_list = surface_mask.get_bounding_rects()\n    if rect_list:\n        surface_mask_rect = rect_list[0].unionall(rect_list)\n        surface_mask_rect.move_ip(topleft)",
        "detail": "src.suppor",
        "documentation": {}
    },
    {
        "label": "get_mask_rect",
        "kind": 2,
        "importPath": "src.suppor",
        "description": "src.suppor",
        "peekOfCode": "def get_mask_rect(surface, topleft=(0, 0)):\n    surface_mask = pygame.mask.from_surface(surface)\n    rect_list = surface_mask.get_bounding_rects()\n    if rect_list:\n        surface_mask_rect = rect_list[0].unionall(rect_list)\n        surface_mask_rect.move_ip(topleft)\n        return surface_mask_rect\ndef create_sprite(image, sprite_info):\n    sprite = pygame.sprite.Sprite()\n    sprite.image = image",
        "detail": "src.suppor",
        "documentation": {}
    },
    {
        "label": "create_sprite",
        "kind": 2,
        "importPath": "src.suppor",
        "description": "src.suppor",
        "peekOfCode": "def create_sprite(image, sprite_info):\n    sprite = pygame.sprite.Sprite()\n    sprite.image = image\n    sprite.rect = pygame.Rect(\n        sprite_info[\"x\"],\n        sprite_info[\"y\"],\n        sprite_info[\"width\"],\n        sprite_info[\"height\"],\n    )\n    return sprite",
        "detail": "src.suppor",
        "documentation": {}
    },
    {
        "label": "create_sprites_group",
        "kind": 2,
        "importPath": "src.suppor",
        "description": "src.suppor",
        "peekOfCode": "def create_sprites_group(sprites_info):\n    group = Group()\n    for sprite_info in sprites_info:\n        image = pygame.image.load(sprite_info[\"image\"]).convert_alpha()\n        image = pygame.transform.scale(\n            image, (sprite_info[\"width\"], sprite_info[\"height\"])\n        )\n        sprite = create_sprite(image, sprite_info)\n        group.add(sprite)\n    return group",
        "detail": "src.suppor",
        "documentation": {}
    },
    {
        "label": "basic_entity_size",
        "kind": 5,
        "importPath": "src.suppor",
        "description": "src.suppor",
        "peekOfCode": "basic_entity_size = (64, 64)\nworld_size = (1280, 800)\nfloor_size = (936, 500)\nrooms_quantity = 8\nmap_size = 7\npurple = (240, 0, 255)\nwhite = (255, 255, 255)\ndef check_time_passed(time, threshold_time):\n    if pygame.time.get_ticks() - time > threshold_time:\n        time = pygame.time.get_ticks()",
        "detail": "src.suppor",
        "documentation": {}
    },
    {
        "label": "world_size",
        "kind": 5,
        "importPath": "src.suppor",
        "description": "src.suppor",
        "peekOfCode": "world_size = (1280, 800)\nfloor_size = (936, 500)\nrooms_quantity = 8\nmap_size = 7\npurple = (240, 0, 255)\nwhite = (255, 255, 255)\ndef check_time_passed(time, threshold_time):\n    if pygame.time.get_ticks() - time > threshold_time:\n        time = pygame.time.get_ticks()\n        return True",
        "detail": "src.suppor",
        "documentation": {}
    },
    {
        "label": "floor_size",
        "kind": 5,
        "importPath": "src.suppor",
        "description": "src.suppor",
        "peekOfCode": "floor_size = (936, 500)\nrooms_quantity = 8\nmap_size = 7\npurple = (240, 0, 255)\nwhite = (255, 255, 255)\ndef check_time_passed(time, threshold_time):\n    if pygame.time.get_ticks() - time > threshold_time:\n        time = pygame.time.get_ticks()\n        return True\ndef get_mask_rect(surface, topleft=(0, 0)):",
        "detail": "src.suppor",
        "documentation": {}
    },
    {
        "label": "rooms_quantity",
        "kind": 5,
        "importPath": "src.suppor",
        "description": "src.suppor",
        "peekOfCode": "rooms_quantity = 8\nmap_size = 7\npurple = (240, 0, 255)\nwhite = (255, 255, 255)\ndef check_time_passed(time, threshold_time):\n    if pygame.time.get_ticks() - time > threshold_time:\n        time = pygame.time.get_ticks()\n        return True\ndef get_mask_rect(surface, topleft=(0, 0)):\n    surface_mask = pygame.mask.from_surface(surface)",
        "detail": "src.suppor",
        "documentation": {}
    },
    {
        "label": "map_size",
        "kind": 5,
        "importPath": "src.suppor",
        "description": "src.suppor",
        "peekOfCode": "map_size = 7\npurple = (240, 0, 255)\nwhite = (255, 255, 255)\ndef check_time_passed(time, threshold_time):\n    if pygame.time.get_ticks() - time > threshold_time:\n        time = pygame.time.get_ticks()\n        return True\ndef get_mask_rect(surface, topleft=(0, 0)):\n    surface_mask = pygame.mask.from_surface(surface)\n    rect_list = surface_mask.get_bounding_rects()",
        "detail": "src.suppor",
        "documentation": {}
    },
    {
        "label": "purple",
        "kind": 5,
        "importPath": "src.suppor",
        "description": "src.suppor",
        "peekOfCode": "purple = (240, 0, 255)\nwhite = (255, 255, 255)\ndef check_time_passed(time, threshold_time):\n    if pygame.time.get_ticks() - time > threshold_time:\n        time = pygame.time.get_ticks()\n        return True\ndef get_mask_rect(surface, topleft=(0, 0)):\n    surface_mask = pygame.mask.from_surface(surface)\n    rect_list = surface_mask.get_bounding_rects()\n    if rect_list:",
        "detail": "src.suppor",
        "documentation": {}
    },
    {
        "label": "white",
        "kind": 5,
        "importPath": "src.suppor",
        "description": "src.suppor",
        "peekOfCode": "white = (255, 255, 255)\ndef check_time_passed(time, threshold_time):\n    if pygame.time.get_ticks() - time > threshold_time:\n        time = pygame.time.get_ticks()\n        return True\ndef get_mask_rect(surface, topleft=(0, 0)):\n    surface_mask = pygame.mask.from_surface(surface)\n    rect_list = surface_mask.get_bounding_rects()\n    if rect_list:\n        surface_mask_rect = rect_list[0].unionall(rect_list)",
        "detail": "src.suppor",
        "documentation": {}
    },
    {
        "label": "test_map_layout_fill",
        "kind": 2,
        "importPath": "test.test_map_layout",
        "description": "test.test_map_layout",
        "peekOfCode": "def test_map_layout_fill():\n    size = 5\n    elem_cuant = 10\n    map_layout = MapLayout(size, elem_cuant)\n    map_layout.fill_layout(elem_cuant)\n    layout_all_false = [[False for _ in range(size)] for _ in range(size)]\n    assert (map_layout.layout != layout_all_false) and (\n        map_layout.elem_count >= elem_cuant\n    ), f\"Error in filling layout, result {map_layout.show()}\"",
        "detail": "test.test_map_layout",
        "documentation": {}
    }
]